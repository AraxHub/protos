syntax = "proto3";

package auth;

option go_package = "gen/go/gRPC_prod;gRPCv1";

//протобаф - типизированный контракт и это учитывается в генерации файлов

service auth {
   rpc Register (RegisterRequest) returns (RegisterResponse); //метод 1 - регистрация
   rpc Login (LoginRequest) returns (LoginResponse); //метод 2 - логиним пользователя и возвращаем ему токены
   rpc isAdmin (IsAdminRequest) returns (IsAdminResponse);
}

message RegisterRequest {   //принмает
  string email = 1;    //почта регистрирующегося
  string password = 2; //пароль регистрирующегося
}
message RegisterResponse {  //возвращает
  int64 user_id = 1;    //id только что созданного пользователя, если что засунем в логи, не обязательное поле
}

message LoginRequest {
  string email = 1;   //email для авторизации
  string password = 2;  //пароль для авторизации
  int32 app_id = 3; //id приложения В КОТОРОЕ человек логинится -> система подразумевает, что она может логинить пользователей в несколько сервисов
}
message LoginResponse {
  string token = 1;   //jwt-токен, формат закодированного jwt-токена = строка
}

message IsAdminRequest {
  int64 user_id = 1;  //id пользователя, которого мы хотим проверить на админа
}
message IsAdminResponse {
  bool is_admin = 1;  //возвращает true/false на вопрос админ ли типок
}